/*
 * Copyright 2016-2019 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

 scope protocol
 {
    scope codec
    {
        enum MqttPackets
        {
            CONNECT,
            CONNACK,
            SUBSCRIBE,
            SUBACK,
            UNSUBSCRIBE,
            UNSUBACK,
            PUBLISH,
            PINGREQ,
            PINGRESP,
            DISCONNECT
        }

        struct Binary
        {
            uint16 length;
            octets[length] bytes;
        }

        struct MqttPacket
        {
            uint8 packetType;
            uint8 remainingLength;
            octets[remainingLength] packet;
        }

        struct MqttConnect
        {
            uint8 packetType;
            uint8 remainingLength;
            uint16 protocolNameLength;
            string protocolName;
            uint8 protocolVersion;
            uint8 flags;
            uint16 keepAlive;
            uint8 propertiesLength;
            uint16 clientIdLength;
            string clientId;
            /*
            int16 willPropertiesLength;
            uint32 willDelayInterval;
            uint8 willPayloadFormatIndicator;
            uint32 willMessageExpiryInterval;
            string willContentType;
            string willResponseTopic;
            protocol::codec::Binary correlationInfo;
            TODO user property utf-8 string pair
            string willTopic;
            int16 willPayloadLength;
            protocol::codec::Binary willPayload;
            int16 usernameLength;
            string username;
            int16 passwordLength;
            protocol::codec::Binary password;
            */
        }

        struct MqttConnack
        {
            uint8 packetType;
            uint8 remainingLength;
            uint16 variableHeader;
            uint16 propertyLength;
        }
    }
 }
