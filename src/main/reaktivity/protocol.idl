/*
 * Copyright 2016-2019 The Reaktivity Project
 *
 * The Reaktivity Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

 scope protocol
 {
    scope codec
    {
        enum MqttPackets
        {
            CONNECT,
            CONNACK,
            SUBSCRIBE,
            SUBACK,
            UNSUBSCRIBE,
            UNSUBACK,
            PUBLISH,
            PINGREQ,
            PINGRESP,
            DISCONNECT
        }

        struct Binary
        {
            uint16 length;
            octets[length] bytes;
        }

        struct MqttPacket
        {
            uint8 packetType;
            uint8 remainingLength;
            octets[remainingLength] packet;
        }

        struct MqttByte
        {
            uint8 value;
        }

        union MqttProperty switch (uint8)
        {
            case 0x11: uint32 sessionExpiry;
            case 0x21: uint16 receiveMaximum;
            case 0x27: uint32 maximumPacketSize;
            case 0x22: uint16 topicAliasMaximum;
            case 0x19: protocol::codec::MqttByte requestResponseInformation;
            case 0x17: protocol::codec::MqttByte requestProblemInformation;
            case 0x24: protocol::codec::MqttByte maximumQoS;
            case 0x25: protocol::codec::MqttByte retainAvailable;
            case 0x12: string assignedClientId;
            case 0x1F: string reasonString;
            case 0x28: protocol::codec::MqttByte wildcardSubscriptionAvailable;
            case 0x29: protocol::codec::MqttByte subscriptionIdsAvailable;
            case 0x2A: protocol::codec::MqttByte sharedSubscriptionAvailable;
            case 0x13: uint16 serverKeepAlive;
            case 0x1A: string responseInformation;
            case 0x1C: string serverReference;
            case 0x15: string authenticationMethod;
            case 0x16: protocol::codec::Binary authenticationData;
        }

        struct MqttConnect
        {
            uint8 packetType;
            uint8 remainingLength;
            string16 protocolName;
            uint8 protocolVersion;
            uint8 flags;
            uint16 keepAlive;
            varint32 propertiesLength;
            string16 clientId;
            octets[propertiesLength] properties;
        }

        struct MqttConnack
        {
            uint8 packetType;
            uint8 remainingLength;
            uint8 flags;
            uint8 reasonCode;
        }
    }
 }
